import com.fasterxml.jackson.databind.ObjectMapper;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import java.io.IOException;
import java.util.*;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'shekar' at '6/15/16 12:01 PM' with Gradle 2.14
 *
 * @author shekar, @date 6/15/16 12:01 PM
 */
public class UniqueDays {

    //dates must be in the format yyyy-mm-dd
    //company represents what organization the data set should be filtered by. if you want all data, enter "".
    //company should be in the format '@example.com'
    public static void getData(String start, String end, String company) {

        //jackson
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            /*

                //people
                try {
                HttpResponse<JsonNode> response;
                response = Unirest.post("https://mixpanel.com/api/2.0/jql")
                        .basicAuth("b2391d4f9782b6cc6fb3e0dac6d7657e", "")
                        .field("script", "function main() {" +
                    "return People().filter(function(user) {" +
                                "return user.properties.$last_activity == '2016-06-15';})}")
                        .asJson();
            **/

            //events
            try {
                HttpResponse<JsonNode> response;
                response = Unirest.post("https://mixpanel.com/api/2.0/jql")
                        .basicAuth("b2391d4f9782b6cc6fb3e0dac6d7657e", "")
                        .field("script", "function main() {" +
                                "return Events({" +
                                "from_date: '" + start +
                                "', to_date: '"+ end +
                                "', event_selectors: [{event: 'Clari Use'}]});}")
                        .asJson();

                //System.out.println(response.getBody().toString());

                List<Javaifier> list = objectMapper.readValue(response.getBody().toString(),
                        objectMapper.getTypeFactory().constructCollectionType(List.class, Javaifier.class));

//                for (int i = 0; i < list.size(); i++)
//                        {
//                                System.out.println(list.get(i).getTime());
//                        }

                //array of times of the week
                long[] times = new long[8];
                long first = toEpoch(start);
                times[0] = first;
                for (int i = 1; i < 8; i++) {
                    times[i] = times[i - 1] + 86400000;
                }

                Map<String, ArrayList<Long>> usage = new HashMap<String, ArrayList<Long>>();
                for (int i = 0; i < list.size(); i++) {
                        String idCheck = list.get(i).getDistinct_id();
                        if (usage.get(idCheck) == null) //not in map
                        {
                            //name or id?
                            ArrayList<Long> temp = new ArrayList<Long>();
                            temp.add(new Long(1));
                            temp.add(list.get(i).getTime());
                            usage.put(idCheck, temp);

                        } else {

                            usage.get(idCheck).add(list.get(i).getTime());
                            Long lastTime = usage.get(idCheck).get(1);
                            Long curTime = list.get(i).getTime();

                            if (seeIfSeparateDays(lastTime, curTime, times)) {
                                //update counter and time
                                Long temp = usage.get(idCheck).get(0) + 1;
                                usage.get(idCheck).set(0, temp);
                            }
                            usage.get(idCheck).set(1, curTime);
                        }
                    }

                if (company.isEmpty()) {
                    for (String key : usage.keySet())
                    {
                        if (key.length() > 3)

                        {
                            String temp = key.substring(key.length() - 3, key.length());
                            //possible 'real' endings
                            if (temp.equals("com") || temp.equals("net") || temp.equals("org") || temp.equals(".us")) {
                                System.out.println(key + ", " + usage.get(key).get(0));
                            }
                        }
                    }
                }
                else organizeBy(company, usage);


            } catch (UnirestException e) {
                e.printStackTrace();
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public static void organizeBy(String companySig, Map<String, ArrayList<Long>> usage)
    {
        for (String key : usage.keySet())
                {
                        int index = key.indexOf("@");
                        if (index != -1 && key.substring(index, key.length()).equals(companySig))
                            System.out.println(key + ", " + usage.get(key).get(0));
                }

    }

    public static boolean seeIfSeparateDays(Long prevTime, Long curTime, long[] times)
    {
        int i = 1;
        while (i < 8)
        {
            if (prevTime < times[i])
            {
                if (i == 7) return false;
                return (curTime > times[i]);
            }
            i++;
        }
        return false;
    }

    public static long toEpoch(String start)
    {

        String delims = "[-]";
        String[] dateArray = start.split(delims);
        Calendar myCalendar = new GregorianCalendar(Integer.parseInt(dateArray[0]), Integer.parseInt(dateArray[1]) - 1,
                Integer.parseInt(dateArray[2]));
        return myCalendar.getTimeInMillis();
    }


    public static void main(String args[])
    {
        getData("2016-06-12", "2016-06-18", "");
    }
}
